<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Generator</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            max-width: 500px;
            width: 100%;
            text-align: center;
        }

        h1 {
            color: #333;
            margin-bottom: 30px;
            font-size: 2.5em;
            font-weight: 300;
        }

        .form-group {
            margin-bottom: 25px;
            text-align: left;
        }

        label {
            display: block;
            margin-bottom: 8px;
            color: #555;
            font-weight: 500;
        }

        input, select {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: white;
        }

        input:focus, select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .checkbox-group {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-top: 10px;
        }

        .checkbox-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .checkbox-item input[type="checkbox"] {
            width: auto;
            margin: 0;
        }

        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 10px;
            min-width: 150px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .password-display {
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
            font-family: 'Courier New', monospace;
            font-size: 18px;
            font-weight: bold;
            color: #333;
            word-break: break-all;
            min-height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .password-list {
            margin-top: 30px;
            text-align: left;
        }

        .password-item {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .password-text {
            font-family: 'Courier New', monospace;
            font-weight: bold;
            flex-grow: 1;
            word-break: break-all;
        }

        .copy-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 12px;
            margin-left: 10px;
        }

        .copy-btn:hover {
            background: #218838;
        }

        .status {
            margin-top: 20px;
            padding: 15px;
            border-radius: 10px;
            font-weight: 500;
        }

        .status.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .hidden {
            display: none;
        }

        @media (max-width: 600px) {
            .container {
                padding: 20px;
                margin: 10px;
            }
            
            h1 {
                font-size: 2em;
            }
            
            .checkbox-group {
                flex-direction: column;
                align-items: flex-start;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîê Password Generator</h1>
        
        <div class="form-group">
            <label for="length">Password Length:</label>
            <input type="range" id="length" min="4" max="50" value="12">
            <span id="lengthValue">12</span>
        </div>

        <div class="form-group">
            <label>Character Types:</label>
            <div class="checkbox-group">
                <div class="checkbox-item">
                    <input type="checkbox" id="uppercase" checked>
                    <label for="uppercase">Uppercase (A-Z)</label>
                </div>
                <div class="checkbox-item">
                    <input type="checkbox" id="lowercase" checked>
                    <label for="lowercase">Lowercase (a-z)</label>
                </div>
                <div class="checkbox-item">
                    <input type="checkbox" id="numbers" checked>
                    <label for="numbers">Numbers (0-9)</label>
                </div>
                <div class="checkbox-item">
                    <input type="checkbox" id="symbols">
                    <label for="symbols">Symbols (!@#$%)</label>
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="count">Number of Passwords:</label>
            <select id="count">
                <option value="1">1</option>
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="25">25</option>
                <option value="50">50</option>
            </select>
        </div>

        <button class="btn" onclick="generatePasswords()">Generate Passwords</button>
        <button class="btn" onclick="uploadToGoogleDrive()" id="uploadBtn" disabled>Upload to Google Drive</button>

        <div class="password-display" id="passwordDisplay">
            Click "Generate Passwords" to create secure passwords
        </div>

        <div class="password-list hidden" id="passwordList"></div>

        <div id="status" class="status hidden"></div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
    <script>
        let generatedPasswords = [];
        let accessToken = null;

        // Get access token from URL parameters or localStorage
        function getAccessToken() {
            const urlParams = new URLSearchParams(window.location.search);
            const token = urlParams.get('access_token') || urlParams.get('token');
            if (token) {
                accessToken = token;
                return token;
            }
            
            // Try to get from localStorage if available
            try {
                return localStorage.getItem('google_access_token');
            } catch (e) {
                return null;
            }
        }

        // Initialize
        window.onload = function() {
            accessToken = getAccessToken();
            updateLengthDisplay();
        };

        function updateLengthDisplay() {
            const lengthSlider = document.getElementById('length');
            const lengthValue = document.getElementById('lengthValue');
            lengthValue.textContent = lengthSlider.value;
            
            lengthSlider.oninput = function() {
                lengthValue.textContent = this.value;
            };
        }

        function generatePassword(length, useUppercase, useLowercase, useNumbers, useSymbols) {
            let charset = '';
            if (useUppercase) charset += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
            if (useLowercase) charset += 'abcdefghijklmnopqrstuvwxyz';
            if (useNumbers) charset += '0123456789';
            if (useSymbols) charset += '!@#$%^&*()_+-=[]{}|;:,.<>?';
            
            if (!charset) {
                showStatus('Please select at least one character type!', 'error');
                return '';
            }
            
            let password = '';
            for (let i = 0; i < length; i++) {
                password += charset.charAt(Math.floor(Math.random() * charset.length));
            }
            
            return password;
        }

        function generatePasswords() {
            const length = parseInt(document.getElementById('length').value);
            const count = parseInt(document.getElementById('count').value);
            const useUppercase = document.getElementById('uppercase').checked;
            const useLowercase = document.getElementById('lowercase').checked;
            const useNumbers = document.getElementById('numbers').checked;
            const useSymbols = document.getElementById('symbols').checked;

            generatedPasswords = [];
            
            for (let i = 0; i < count; i++) {
                const password = generatePassword(length, useUppercase, useLowercase, useNumbers, useSymbols);
                if (password) {
                    generatedPasswords.push(password);
                }
            }

            displayPasswords();
            document.getElementById('uploadBtn').disabled = generatedPasswords.length === 0;
        }

        function displayPasswords() {
            const passwordDisplay = document.getElementById('passwordDisplay');
            const passwordList = document.getElementById('passwordList');
            
            if (generatedPasswords.length === 0) {
                passwordDisplay.textContent = 'No passwords generated';
                passwordList.classList.add('hidden');
                return;
            }

            if (generatedPasswords.length === 1) {
                passwordDisplay.textContent = generatedPasswords[0];
                passwordList.classList.add('hidden');
            } else {
                passwordDisplay.textContent = `${generatedPasswords.length} passwords generated`;
                displayPasswordList();
            }
        }

        function displayPasswordList() {
            const passwordList = document.getElementById('passwordList');
            passwordList.innerHTML = '<h3>Generated Passwords:</h3>';
            
            generatedPasswords.forEach((password, index) => {
                const passwordItem = document.createElement('div');
                passwordItem.className = 'password-item';
                passwordItem.innerHTML = `
                    <span class="password-text">${password}</span>
                    <button class="copy-btn" onclick="copyToClipboard('${password}')">Copy</button>
                `;
                passwordList.appendChild(passwordItem);
            });
            
            passwordList.classList.remove('hidden');
        }

        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(() => {
                showStatus('Password copied to clipboard!', 'success');
            }).catch(() => {
                showStatus('Failed to copy password', 'error');
            });
        }

        async function uploadToGoogleDrive() {
            if (generatedPasswords.length === 0) {
                showStatus('No passwords to upload!', 'error');
                return;
            }

            if (!accessToken) {
                showStatus('No Google Drive access token found. Please login first.', 'error');
                return;
            }

            const uploadBtn = document.getElementById('uploadBtn');
            uploadBtn.disabled = true;
            uploadBtn.textContent = 'Uploading...';

            try {
                // Create file content
                const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
                const filename = `passwords_${timestamp}.txt`;
                const content = `Generated Passwords - ${new Date().toLocaleString()}\n\n` +
                               generatedPasswords.map((pwd, i) => `${i + 1}. ${pwd}`).join('\n');

                // Upload to Google Drive
                const metadata = {
                    name: filename,
                    parents: ['root']
                };

                const form = new FormData();
                form.append('metadata', new Blob([JSON.stringify(metadata)], {type: 'application/json'}));
                form.append('file', new Blob([content], {type: 'text/plain'}));

                const response = await fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${accessToken}`
                    },
                    body: form
                });

                if (response.ok) {
                    const result = await response.json();
                    showStatus(`Passwords successfully uploaded to Google Drive as "${filename}"`, 'success');
                } else {
                    const error = await response.json();
                    throw new Error(error.error?.message || 'Upload failed');
                }
            } catch (error) {
                console.error('Upload error:', error);
                showStatus(`Upload failed: ${error.message}`, 'error');
            } finally {
                uploadBtn.disabled = false;
                uploadBtn.textContent = 'Upload to Google Drive';
            }
        }

        function showStatus(message, type) {
            const status = document.getElementById('status');
            status.textContent = message;
            status.className = `status ${type}`;
            status.classList.remove('hidden');
            
            setTimeout(() => {
                status.classList.add('hidden');
            }, 5000);
        }

        // Handle keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey && e.key === 'Enter') {
                generatePasswords();
            }
        });
    </script>
</body>
</html>
